// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/google/go-github/v56/github"
	mock "github.com/stretchr/testify/mock"
)

// UsersService is an autogenerated mock type for the UsersService type
type UsersService struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, user
func (_m *UsersService) Get(ctx context.Context, user string) (*github.User, *github.Response, error) {
	ret := _m.Called(ctx, user)

	var r0 *github.User
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*github.User, *github.Response, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *github.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *github.Response); ok {
		r1 = rf(ctx, user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, user)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListPackages provides a mock function with given fields: ctx, org, opts
func (_m *UsersService) ListPackages(ctx context.Context, org string, opts *github.PackageListOptions) ([]*github.Package, *github.Response, error) {
	ret := _m.Called(ctx, org, opts)

	var r0 []*github.Package
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.PackageListOptions) ([]*github.Package, *github.Response, error)); ok {
		return rf(ctx, org, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *github.PackageListOptions) []*github.Package); ok {
		r0 = rf(ctx, org, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Package)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *github.PackageListOptions) *github.Response); ok {
		r1 = rf(ctx, org, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *github.PackageListOptions) error); ok {
		r2 = rf(ctx, org, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PackageGetAllVersions provides a mock function with given fields: ctx, org, packageType, packageName, opts
func (_m *UsersService) PackageGetAllVersions(ctx context.Context, org string, packageType string, packageName string, opts *github.PackageListOptions) ([]*github.PackageVersion, *github.Response, error) {
	ret := _m.Called(ctx, org, packageType, packageName, opts)

	var r0 []*github.PackageVersion
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.PackageListOptions) ([]*github.PackageVersion, *github.Response, error)); ok {
		return rf(ctx, org, packageType, packageName, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.PackageListOptions) []*github.PackageVersion); ok {
		r0 = rf(ctx, org, packageType, packageName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.PackageVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.PackageListOptions) *github.Response); ok {
		r1 = rf(ctx, org, packageType, packageName, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.PackageListOptions) error); ok {
		r2 = rf(ctx, org, packageType, packageName, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewUsersService creates a new instance of UsersService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersService {
	mock := &UsersService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
